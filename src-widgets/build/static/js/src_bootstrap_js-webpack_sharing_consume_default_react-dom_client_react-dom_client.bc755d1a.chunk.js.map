{"version":3,"file":"static/js/src_bootstrap_js-webpack_sharing_consume_default_react-dom_client_react-dom_client.bc755d1a.chunk.js","mappings":"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","sources":["DemoWidget.jsx","Zugspitze.jsx","translations.js","App.jsx","bootstrap.js"],"sourcesContent":["import React from 'react';\nimport { VisRxWidget } from '@iobroker/vis-2-widgets-react-dev';\n\nclass DemoWidget extends (window.visRxWidget || VisRxWidget) {\n    static getWidgetInfo() {\n        return {\n            id: 'tplZugspitzeDemoWidget',\n            visSet: 'vis-2-widgets-zugspitze',\n            visSetLabel: 'vis_2_widgets_set_zugspitze',\n            visWidgetLabel: 'vis_2_widgets_zugspitze_widget_demo',\n            visSetColor: 'red',\n            visName: 'ZugspitzeDemoWidget',\n            visAttrs: [],\n            visPrev: 'widgets/zugspitze-widgets-next/img/vis-widget-demo.png',\n        };\n    }\n\n    // eslint-disable-next-line class-methods-use-this\n    propertiesUpdate() {\n        // Widget has 3 important states\n        // 1. this.state.values - contains all state values, that are used in widget (automatically collected from widget info).\n        //                        So you can use `this.state.values[this.state.rxData.oid + '.val']` to get value of state with id this.state.rxData.oid\n        // 2. this.state.rxData - contains all widget data with replaced bindings. E.g. if this.state.data.type is `{system.adapter.admin.0.alive}`,\n        //                        then this.state.rxData.type will have state value of `system.adapter.admin.0.alive`\n        // 3. this.state.rxStyle - contains all widget styles with replaced bindings. E.g. if this.state.styles.width is `{javascript.0.width}px`,\n        //                        then this.state.rxData.type will have state value of `javascript.0.width` + 'px\n    }\n\n    componentDidMount() {\n        super.componentDidMount();\n\n        // Update data\n        this.propertiesUpdate();\n    }\n\n    // Do not delete this method. It is used by vis to read the widget configuration.\n    // eslint-disable-next-line class-methods-use-this\n    getWidgetInfo() {\n        return DemoWidget.getWidgetInfo();\n    }\n\n    // This function is called every time when rxData is changed\n    onRxDataChanged() {\n        this.propertiesUpdate();\n    }\n\n    // This function is called every time when rxStyle is changed\n    // eslint-disable-next-line class-methods-use-this\n    onRxStyleChanged() {\n\n    }\n\n    // This function is called every time when some Object State updated, but all changes lands into this.state.values too\n    // eslint-disable-next-line class-methods-use-this, no-unused-vars\n    onStateUpdated(id, state) {\n\n    }\n\n    renderWidgetBody(props) {\n        super.renderWidgetBody(props);\n\n        return <h1>Hello World</h1>;\n    }\n}\n\nexport default DemoWidget;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport { VisRxWidget } from '@iobroker/vis-2-widgets-react-dev';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nclass Zugspitze extends (window.visRxWidget || VisRxWidget) {\n    static getWidgetInfo() {\n        return {\n            id: 'tplZugspitzeMainWidget',\n            visSet: 'vis-2-widgets-zugspitze',\n            visSetLabel: 'vis_2_widgets_set_zugspitze',\n            visWidgetLabel: 'vis_2_widgets_zugspitze_widget_main',\n            visSetColor: 'red',\n            visName: 'ZugspitzeMainWidget',\n            visAttrs: [],\n            visPrev: 'widgets/zugspitze-widgets-next/img/vis-widget-demo.png',\n        };\n    }\n\n    // eslint-disable-next-line class-methods-use-this\n    propertiesUpdate() {\n        // Widget has 3 important states\n        // 1. this.state.values - contains all state values, that are used in widget (automatically collected from widget info).\n        //                        So you can use `this.state.values[this.state.rxData.oid + '.val']` to get value of state with id this.state.rxData.oid\n        // 2. this.state.rxData - contains all widget data with replaced bindings. E.g. if this.state.data.type is `{system.adapter.admin.0.alive}`,\n        //                        then this.state.rxData.type will have state value of `system.adapter.admin.0.alive`\n        // 3. this.state.rxStyle - contains all widget styles with replaced bindings. E.g. if this.state.styles.width is `{javascript.0.width}px`,\n        //                        then this.state.rxData.type will have state value of `javascript.0.width` + 'px\n    }\n\n    componentDidMount() {\n        super.componentDidMount();\n\n        // Update data\n        this.propertiesUpdate();\n    }\n\n    // Do not delete this method. It is used by vis to read the widget configuration.\n    // eslint-disable-next-line class-methods-use-this\n    getWidgetInfo() {\n        return Zugspitze.getWidgetInfo();\n    }\n\n    // This function is called every time when rxData is changed\n    onRxDataChanged() {\n        this.propertiesUpdate();\n    }\n\n    // This function is called every time when rxStyle is changed\n    // eslint-disable-next-line class-methods-use-this\n    onRxStyleChanged() {\n\n    }\n\n    // This function is called every time when some Object State updated, but all changes lands into this.state.values too\n    // eslint-disable-next-line class-methods-use-this, no-unused-vars\n    onStateUpdated(id, state) {\n\n    }\n\n    renderWidgetBody(props) {\n        super.renderWidgetBody(props);\n\n        return (\n            <>\n              <Button variant=\"primary\">Primary</Button>{' '}\n              <Button variant=\"secondary\">Secondary</Button>{' '}\n              <Button variant=\"success\">Success</Button>{' '}\n              <Button variant=\"warning\">Warning</Button>{' '}\n              <Button variant=\"danger\">Danger</Button>{' '}\n              <Button variant=\"info\">Info</Button>{' '}\n              <Button variant=\"light\">Light</Button>{' '}\n              <Button variant=\"dark\">Dark</Button>\n              <Button variant=\"link\">Link</Button>\n            </>\n        );\n    }\n}\n\nexport default Zugspitze;\n","const translations = {\n    en: require('./i18n/en.json'),\n    de: require('./i18n/de.json'),\n    ru: require('./i18n/ru.json'),\n    pt: require('./i18n/pt.json'),\n    nl: require('./i18n/nl.json'),\n    fr: require('./i18n/fr.json'),\n    it: require('./i18n/it.json'),\n    es: require('./i18n/es.json'),\n    pl: require('./i18n/pl.json'),\n    'zh-cn': require('./i18n/zh-cn.json'),\n};\n\nexport default translations;\n","import React from 'react';\n\nimport WidgetDemoApp from '@iobroker/vis-2-widgets-react-dev/widgetDemoApp';\nimport { i18n as I18n } from '@iobroker/adapter-react-v5';\n\nimport DemoWidget from './DemoWidget';\nimport Zugspitze from './Zugspitze';\nimport translations from './translations';\n\nclass App extends WidgetDemoApp {\n    constructor(props) {\n        super(props);\n\n        // init translations\n        I18n.extendTranslations(translations);\n    }\n\n    renderWidget() {\n        return <div>\n            <DemoWidget\n                socket={this.socket}\n                style={{\n                    width: 600,\n                    height: 200,\n                }}\n                data={{\n                    type: 'all',\n                }}\n            />\n            <Zugspitze\n                socket={this.socket}\n                style={{\n                    width: 600,\n                    height: 200,\n                }}\n                data={{\n                    type: 'all',\n                }}\n            />\n        </div>;\n    }\n}\n\nexport default App;\n","import bootstrap from '@iobroker/vis-2-widgets-react-dev/bootstrap';\nimport App from './App';\n\nbootstrap(App);\n"],"names":["DemoWidget","window","visRxWidget","VisRxWidget","getWidgetInfo","id","visSet","visSetLabel","visWidgetLabel","visSetColor","visName","visAttrs","visPrev","propertiesUpdate","componentDidMount","super","this","onRxDataChanged","onRxStyleChanged","onStateUpdated","state","renderWidgetBody","props","_jsx","children","Zugspitze","_jsxs","_Fragment","Button","variant","en","require","de","ru","pt","nl","fr","it","es","pl","App","WidgetDemoApp","constructor","I18n","extendTranslations","translations","renderWidget","socket","style","width","height","data","type","bootstrap"],"sourceRoot":""}